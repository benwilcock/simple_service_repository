<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.soagrowers</groupId>
	<artifactId>simpleservicerepository</artifactId>
	<packaging>war</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>SOAGrowers Simple Service Repository</name>
	<url>http://maven.apache.org</url>

<!-- 
**************************************************************************************************************************
Welcome to the SOAGrowers.com Simple Service Repository application.

To use the simple service repository follow these 3 simple steps (and repeat when you change content in 
the repository). 

1. Add your service content to the web-app and Install the application into your Maven repository.

To add content, simply treat the application like a website. Content can be added in any format, you just 
need to maintain the webpages so that all your links work. Be sure to add content in the folder 
"src/main/webapp" and not under WEB-INF (or it won't be visible). 

To install all the content (like service WSDL's etc.) into your Maven repository, use the commandline "mvn 
clean install". This will package your application as a WAR for use on servers and add your WAR archive 
to the local maven repository (under the groupId and artifactId above). This will allow your content to be used by 
other local applications who have access to the same Maven repository.

To deploy to a remote maven repository is a bit more complicated, see the Maven docs.

2. Deploy and run the web-app on a web server.

To run the application you can deploy it manually to a Glassfish 3.1 server or use the embedded Glassfish 
test profile detailed below. Basically use the commandline "mvn clean package embedded-glassfish:run 
-Pembeddedgftest". Alternatively, you could use the CARGO plugin for maven to automate deployment to 
a running server (recommended) or use the equivalent Jenkins/Hudson plugin in your CI environement.

3. Use your service repository's content (like WSDL's) in other applications.

To see an example of how an application can copy content from a WAR in the Maven repository, see the 
example pom.xml in the folder "com.soagrowers.simpleservicerepository\src\main\webapp\r201107".

Enjoy.

P.S. Don't forget to use a source code repository like SVN so that you get full version control, and do 
use a continuous integration server like Jenkins or Hudson to build and deploy your code for you 
automatically when the SVN content changes (so that you get the benefit	of regular builds and frequent 
deployments). Jenkins/Hudson have CRON timers & SVN triggers available and both can deploy to servers like 
Glassfish using an free plugin (available in the server-config area).

**************************************************************************************************************************
-->
	<build>
		<finalName>com.soagrowers.simpleservicerepository</finalName>
		<plugins>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.2.1</version>
				<configuration>
					<descriptors>
						<descriptor>src/assembley/distribution.xml</descriptor>
					</descriptors>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<!-- To run this application locally using embedded GlassFish 3.1 via Maven, simply use the commandline 
		"mvn clean package embedded-glassfish:run -Pembeddedgftest" and then point your brower to
		"http://localhost:8080/simpleservicerepository/"-->
		<profile>
			<id>embeddedgftest</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.glassfish</groupId>
						<artifactId>maven-embedded-glassfish-plugin</artifactId>
						<version>3.1</version>
						<configuration>
							<app>${project.build.directory}/${project.build.finalName}.war</app>
							<name>${build.finalName}</name>
							<deploymentParams>
								<param>--contextroot=simpleservicerepository</param>
							</deploymentParams>
							<ports>
								<http-listener>8080</http-listener>
								<https-listener>8181</https-listener>
							</ports>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>start</goal>
									<goal>deploy</goal>
									<goal>undeploy</goal>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	<pluginRepositories>
		<pluginRepository>
			<id>glassfish-maven2-repository.dev.java.net</id>
			<url>http://download.java.net/maven/glassfish/</url>
			<layout>default</layout>
		</pluginRepository>
	</pluginRepositories>
</project>
